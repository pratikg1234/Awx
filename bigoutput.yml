---
- name: Check MS SQL Server Health
  hosts: 10.112.0.10
  gather_facts: no
  vars:
    sql_instance: "10.112.0.10"
    sql_user: "rajusql"
    sql_password: "Raju@2002"

  tasks:
    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_space
      ignore_errors: yes

    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT name AS DatabaseName, state_desc AS Status FROM sys.databases;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes

    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes

    - name: Get SQL Agent Job Activities
      win_shell: |
        try {
          $query = "SELECT name, enabled, last_run_outcome FROM msdb.dbo.sysjobs;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_activities
      ignore_errors: yes

    - name: Convert Outputs to JSON
      set_fact:
        db_space_fact: "{{ db_space.stdout | from_json | default([]) }}"
        db_health_fact: "{{ db_health.stdout | from_json | default([]) }}"
        deadlocks_fact: "{{ deadlocks.stdout | from_json | default([]) }}"
        job_activities_fact: "{{ job_activities.stdout | from_json | default([]) }}"

    - name: Display Formatted Results
      debug:
        msg: |
          ðŸ“Š Database Space Utilization:
          {%- for db in db_space_fact %}
          - {{ db.DatabaseName }}: {{ db.SizeMB }} MB
          {%- endfor %}

          ðŸš¨ Deadlocks:
          {%- if deadlocks_fact[0]['Deadlocks'] | int == 0 %}
          - No deadlocks detected
          {%- else %}
          - Detected {{ deadlocks_fact[0]['Deadlocks'] }} deadlocks
          {%- endif %}

          ðŸ›  SQL Server Agent Job Activities:
          {%- for job in job_activities_fact %}
          - Job: {{ job.name }} | Enabled: {{ job.enabled }} | Last Outcome: {{ {0: "Failed", 1: "Succeeded", 2: "Retry", 3: "Canceled"}.get(job.last_run_outcome | int, "Unknown") }}
          {%- endfor %}

          ðŸ©º Database Health Check:
          {%- for db in db_health_fact %}
          - Database: {{ db.DatabaseName }}
            - Status: {{ db.Status }}
          {%- endfor %}
